version: '3.8'

services:
  cleaning-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cleaning-monitor
    volumes:
      # Монтируем директории для входных и выходных данных
      - ./data:/app/data
      - ./output:/app/output
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    # Переопределяем команду по умолчанию для генерации данных и обработки
    command: >
      sh -c "
        echo ' Генерация тестовых данных...' &&
        python -m src.utils.data_generator &&
        echo ' Запуск пакетной обработки...' &&
        python main.py --debug
      "
    # Настройки ресурсов
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Политика перезапуска
    restart: "no"

  # Новый сервис для демонстрации реального времени
  cleaning-monitor-realtime:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cleaning-monitor-realtime
    volumes:
      - ./data:/app/data
      - ./output:/app/output
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    # Режим реального времени с ускорением
    command: >
      sh -c "
        echo ' Генерация тестовых данных...' &&
        python -m src.utils.data_generator &&
        echo ' Запуск обработки в режиме реального времени...' &&
        python main.py --debug --realtime --speed 1.0
      "
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: "no"

  # Дополнительный сервис для разработки с интерактивным режимом
  cleaning-monitor-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cleaning-monitor-dev
    volumes:
      - ./data:/app/data
      - ./output:/app/output
      - ./logs:/app/logs
      - .:/app  # Монтируем весь проект для разработки
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    # Интерактивный режим
    stdin_open: true
    tty: true
    # Переопределяем entrypoint для разработки
    entrypoint: /bin/bash
    profiles:
      - dev