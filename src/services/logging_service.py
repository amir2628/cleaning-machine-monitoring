"""
–°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–±–æ—Ä–æ—á–Ω—ã—Ö –º–∞—à–∏–Ω
"""

import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional


class ColoredFormatter(logging.Formatter):
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI
    COLORS = {
        'DEBUG': '\033[36m',      # –ì–æ–ª—É–±–æ–π
        'INFO': '\033[32m',       # –ó–µ–ª–µ–Ω—ã–π
        'WARNING': '\033[33m',    # –ñ–µ–ª—Ç—ã–π
        'ERROR': '\033[31m',      # –ö—Ä–∞—Å–Ω—ã–π
        'CRITICAL': '\033[35m',   # –ü—É—Ä–ø—É—Ä–Ω—ã–π
        'RESET': '\033[0m'        # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
    }
    
    def format(self, record):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤
        
        Args:
            record: –ó–∞–ø–∏—Å—å –ª–æ–≥–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ü–≤–µ—Ç–∞–º–∏
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_msg = record.getMessage()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        level_color = self.COLORS.get(record.levelname, '')
        reset_color = self.COLORS['RESET']
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –ø—Ä–µ—Ñ–∏–∫—Å —É—Ä–æ–≤–Ω—è
        colored_level = f"{level_color}{record.levelname:8}{reset_color}"
        
        # –ó–∞–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –∑–∞–ø–∏—Å–∏
        record.levelname = colored_level
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        formatted = super().format(record)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        record.levelname = record.levelname.strip()
        
        return formatted


class CleaningSystemLogger:
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–±–æ—Ä–æ—á–Ω—ã—Ö –º–∞—à–∏–Ω
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    """
    
    def __init__(self, logger: logging.Logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            logger: –ë–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
        """
        self.logger = logger
        self._start_time = datetime.now()
    
    def log_machine_event(self, machine_id: int, event: str, details: str = ""):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –º–∞—à–∏–Ω—ã
        
        Args:
            machine_id: ID –º–∞—à–∏–Ω—ã
            event: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        message = f"üöö –ú–∞—à–∏–Ω–∞ {machine_id}: {event}"
        if details:
            message += f" - {details}"
        self.logger.info(message)
    
    def log_yard_event(self, yard_id: int, event: str, details: str = ""):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–≤–æ—Ä–∞
        
        Args:
            yard_id: ID –¥–≤–æ—Ä–∞
            event: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        message = f"üè† –î–≤–æ—Ä {yard_id}: {event}"
        if details:
            message += f" - {details}"
        self.logger.info(message)
    
    def log_status_change(self, yard_id: int, old_status: int, new_status: int, machine_id: int):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–æ—Ä–∞
        
        Args:
            yard_id: ID –¥–≤–æ—Ä–∞
            old_status: –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            machine_id: ID –º–∞—à–∏–Ω—ã, –≤—ã–∑–≤–∞–≤—à–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        """
        self.logger.info(
            f"üìä –°—Ç–∞—Ç—É—Å –¥–≤–æ—Ä–∞ {yard_id} –∏–∑–º–µ–Ω–µ–Ω: {old_status}% ‚Üí {new_status}% "
            f"(–º–∞—à–∏–Ω–∞ {machine_id})"
        )
    
    def log_system_stats(self, stats: dict):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        self.logger.info("üìà –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for key, value in stats.items():
            if isinstance(value, float):
                self.logger.info(f"   {key}: {value:.2f}")
            else:
                self.logger.info(f"   {key}: {value}")
    
    def log_performance_metrics(self, messages_processed: int, processing_time: float):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            messages_processed: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            processing_time: –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        rate = messages_processed / processing_time if processing_time > 0 else 0
        self.logger.info(
            f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {messages_processed} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {processing_time:.2f}—Å "
            f"({rate:.1f} —Å–æ–æ–±—â/—Å–µ–∫)"
        )
    
    def log_error_with_context(self, error: Exception, context: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        """
        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {type(error).__name__}: {error}")
    
    def get_uptime(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã
        """
        uptime = datetime.now() - self._start_time
        return str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã


def setup_logging(debug_mode: bool = False, log_file: Optional[str] = None) -> CleaningSystemLogger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        debug_mode: –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å–∏—Å—Ç–µ–º—ã
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.DEBUG if debug_mode else logging.INFO
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('cleaning_system')
    logger.setLevel(log_level)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    if log_file:
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
    else:
        log_dir = Path('logs')
        log_dir.mkdir(exist_ok=True)
        log_file = log_dir / f"cleaning_system_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    
    # –§–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    console_format = '%(asctime)s | %(levelname)s | %(message)s'
    file_format = '%(asctime)s | %(levelname)-8s | %(name)s | %(funcName)s:%(lineno)d | %(message)s'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(log_level)
    
    if sys.stdout.isatty():  # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞
        console_formatter = ColoredFormatter(console_format)
    else:  # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞
        console_formatter = logging.Formatter(console_format)
    
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)  # –í —Ñ–∞–π–ª –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ
    file_formatter = logging.Formatter(file_format)
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    system_logger = CleaningSystemLogger(logger)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    logger.info(" –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info(f" –§–∞–π–ª –ª–æ–≥–æ–≤: {log_file}")
    logger.info(f" –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if debug_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    
    return system_logger


def create_file_logger(name: str, log_file: str, level: int = logging.INFO) -> logging.Logger:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    logger = logging.getLogger(name)
    logger.setLevel(level)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    Path(log_file).parent.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = logging.FileHandler(log_file, encoding='utf-8')
    handler.setLevel(level)
    
    formatter = logging.Formatter(
        '%(asctime)s | %(levelname)-8s | %(message)s'
    )
    handler.setFormatter(formatter)
    
    logger.addHandler(handler)
    return logger


def log_system_info():
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
    """
    logger = logging.getLogger('cleaning_system')
    
    import platform
    import psutil
    
    logger.info("üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    logger.info(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
    logger.info(f"   Python: {platform.python_version()}")
    logger.info(f"   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
    logger.info(f"   –û–ó–£: {psutil.virtual_memory().total // (1024**3)} –ì–ë")
    logger.info(f"   –î–∏—Å–∫: {psutil.disk_usage('/').total // (1024**3)} –ì–ë")


def setup_debug_logging() -> CleaningSystemLogger:
    """
    –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    Returns:
        –õ–æ–≥–≥–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    """
    return setup_logging(debug_mode=True)


def setup_production_logging(log_dir: str = "logs") -> CleaningSystemLogger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    
    Args:
        log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        
    Returns:
        –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    """
    log_file = Path(log_dir) / f"production_{datetime.now().strftime('%Y%m%d')}.log"
    return setup_logging(debug_mode=False, log_file=str(log_file))