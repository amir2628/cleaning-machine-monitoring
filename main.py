"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–±–æ—Ä–æ—á–Ω—ã—Ö –º–∞—à–∏–Ω
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–∞—à–∏–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–±–æ—Ä–∫–∏ –¥–≤–æ—Ä–æ–≤
"""

import json
import logging
import random
import time
import threading
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
from queue import Queue

from src.models.machine import Machine, MachineMessage
from src.models.yard import Yard, YardStatus
from src.services.cleaning_service import CleaningService
from src.services.logging_service import setup_logging
from src.utils.file_handler import FileHandler


class MessageTransmissionSimulator:
    """
    –°–∏–º—É–ª—è—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:
    - –ü–µ—Ä–µ–¥–∞—á–∞ ~1 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
    - –ü–æ—Ç–µ—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π (5-8%)
    - –û—à–∏–±–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (1-2%)
    - –ó–∞–¥–µ—Ä–∂–∫–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ
    """
    
    def __init__(self, 
                 message_interval: float = 1.0,
                 loss_rate: float = 0.06,
                 coordinate_error_rate: float = 0.015,
                 max_delay: float = 2.0):
        """
        Args:
            message_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
            loss_rate: –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (0.06 = 6%)
            coordinate_error_rate: –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            max_delay: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
        """
        self.message_interval = message_interval
        self.loss_rate = loss_rate
        self.coordinate_error_rate = coordinate_error_rate
        self.max_delay = max_delay
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_generated = 0
        self.total_lost = 0
        self.total_delayed = 0
        self.total_with_errors = 0
        self.logger = logging.getLogger('cleaning_system')
    
    def simulate_transmission(self, messages: List[Dict], message_queue: Queue, 
                            processing_speed: float = 1.0):
        """
        –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            message_queue: –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            processing_speed: –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ (1.0 = —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
        """
        self.logger.info(f"üì° –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        self.logger.info(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∏–Ω—Ç–µ—Ä–≤–∞–ª={self.message_interval/processing_speed:.2f}—Å, "
                        f"–ø–æ—Ç–µ—Ä–∏={self.loss_rate*100:.1f}%, –æ—à–∏–±–∫–∏={self.coordinate_error_rate*100:.1f}%")
        
        for i, message in enumerate(messages):
            self.total_generated += 1
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Ç–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if random.random() < self.loss_rate:
                self.total_lost += 1
                self.logger.debug(f"üìâ –°–æ–æ–±—â–µ–Ω–∏–µ #{i+1} –æ—Ç –º–∞—à–∏–Ω—ã {message['machine_id']} –ø–æ—Ç–µ—Ä—è–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ")
                # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞–∂–µ –¥–ª—è –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                time.sleep(random.uniform(0.5, self.message_interval) / processing_speed)
                continue
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏
            transmission_delay = random.uniform(0, self.max_delay)
            if transmission_delay > 0.8:
                self.total_delayed += 1
                self.logger.debug(f"‚è±Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ #{i+1} –∑–∞–¥–µ—Ä–∂–∞–Ω–æ –Ω–∞ {transmission_delay:.1f}—Å")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            processed_message = message.copy()
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            if random.random() < self.coordinate_error_rate:
                self.total_with_errors += 1
                processed_message = self._add_coordinate_error(processed_message)
                self.logger.debug(f" –°–æ–æ–±—â–µ–Ω–∏–µ #{i+1} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥–∞—á–∏
            time.sleep(transmission_delay / processing_speed)
            
            # –ü–æ–º–µ—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
            message_queue.put(processed_message)
            
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é)
            actual_interval = random.uniform(
                self.message_interval * 0.8, 
                self.message_interval * 1.2
            )
            time.sleep(actual_interval / processing_speed)
        
        # –°–∏–≥–Ω–∞–ª –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏
        message_queue.put(None)
        self.logger.info(f"üì° –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Ç–µ—Ä—è–Ω–æ: {self.total_lost}/{self.total_generated}")
    
    def _add_coordinate_error(self, message: Dict) -> Dict:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        error_type = random.choice(['offset', 'noise', 'swap', 'scale'])
        
        x, y = message['x'], message['y']
        
        if error_type == 'offset':
            # –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
            offset_x = random.uniform(-8, 8)
            offset_y = random.uniform(-8, 8)
            message['x'] = round(x + offset_x, 2)
            message['y'] = round(y + offset_y, 2)
            
        elif error_type == 'noise':
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞
            noise_x = random.uniform(-4, 4)
            noise_y = random.uniform(-4, 4)
            message['x'] = round(x + noise_x, 2)
            message['y'] = round(y + noise_y, 2)
            
        elif error_type == 'swap':
            # –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            message['x'] = round(y, 2)
            message['y'] = round(x, 2)
            
        elif error_type == 'scale':
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            scale = random.uniform(0.85, 1.15)
            message['x'] = round(x * scale, 2)
            message['y'] = round(y * scale, 2)
        
        return message
    
    def get_transmission_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏"""
        delivered = self.total_generated - self.total_lost
        return {
            'total_generated': self.total_generated,
            'total_delivered': delivered,
            'total_lost': self.total_lost,
            'total_delayed': self.total_delayed,
            'total_with_errors': self.total_with_errors,
            'delivery_rate': (delivered / self.total_generated * 100) if self.total_generated > 0 else 0,
            'error_rate': (self.total_with_errors / delivered * 100) if delivered > 0 else 0
        }


class CleaningMonitoringSystem:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–±–æ—Ä–æ—á–Ω—ã—Ö –º–∞—à–∏–Ω
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
    - –ó–∞–≥—Ä—É–∑–∫—É —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–≤–æ—Ä–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–∞—à–∏–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —É–±–æ—Ä–∫–∏
    - –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    
    def __init__(self, debug_mode: bool = False, realtime_mode: bool = False, 
                 processing_speed: float = 1.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Args:
            debug_mode: –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            realtime_mode: –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –ø–µ—Ä–µ–¥–∞—á–∏
            processing_speed: –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä (–æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CleaningSystemLogger)
        system_logger = setup_logging(debug_mode)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π logger –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = system_logger.logger
        
        self.cleaning_service = CleaningService(self.logger)
        self.file_handler = FileHandler(self.logger)
        self.machines: Dict[int, Machine] = {}
        self.yards: Dict[int, Yard] = {}
        self.status_changes: List[Dict] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        self.realtime_mode = realtime_mode
        self.processing_speed = processing_speed
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.message_queue = Queue()
        self.processing_active = False
        self.processed_messages = 0
        self.start_time = None
        
        mode_text = "—Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" if realtime_mode else "–ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        self.logger.info(f" –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–±–æ—Ä–æ—á–Ω—ã—Ö –º–∞—à–∏–Ω –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ {mode_text}")
    
    def load_yard_directory(self, yard_file_path: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–≤–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            yard_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º –¥–≤–æ—Ä–æ–≤
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            self.logger.info(f" –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–≤–æ—Ä–æ–≤ –∏–∑ {yard_file_path}")
            
            yard_data = self.file_handler.load_yard_directory(yard_file_path)
            
            for yard_info in yard_data:
                yard = Yard(
                    yard_id=yard_info['yard_id'],
                    area=yard_info['area'],
                    cleaning_speed=yard_info['cleaning_speed']
                )
                self.yards[yard.yard_id] = yard
                
                self.logger.debug(
                    f"–î–≤–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: ID={yard.yard_id}, "
                    f"–ü–ª–æ—â–∞–¥—å={yard.area}–º¬≤, "
                    f"–°–∫–æ—Ä–æ—Å—Ç—å={yard.cleaning_speed}–º¬≤/—Å–µ–∫"
                )
            
            self.logger.info(f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.yards)} –¥–≤–æ—Ä–æ–≤")
            return True
            
        except Exception as e:
            self.logger.error(f" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–≤–æ—Ä–æ–≤: {e}")
            return False
    
    def process_machine_messages(self, messages_file_path: str) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–∞—à–∏–Ω
        
        Args:
            messages_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –º–∞—à–∏–Ω
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            self.logger.info(f"üì® –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {messages_file_path}")
            
            messages = self.file_handler.load_machine_messages(messages_file_path)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            messages.sort(key=lambda x: x['timestamp'])
            
            if self.realtime_mode:
                return self._process_messages_realtime(messages)
            else:
                return self._process_messages_batch(messages)
            
        except Exception as e:
            self.logger.error(f" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False
    
    def _process_messages_batch(self, messages: List[Dict]) -> bool:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)"""
        processed_count = 0
        for message_data in messages:
            if self._process_single_message(message_data):
                processed_count += 1
        
        self.logger.info(f" –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return True
    
    def _process_messages_realtime(self, messages: List[Dict]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞—á–∏
        simulator = MessageTransmissionSimulator(
            message_interval=1.0,
            loss_rate=0.06,  # 6% –ø–æ—Ç–µ—Ä—å
            coordinate_error_rate=0.015,  # 1.5% –æ—à–∏–±–æ–∫
            max_delay=2.0
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.processing_active = True
        self.start_time = datetime.now()
        
        processor_thread = threading.Thread(
            target=self._message_processor_worker,
            daemon=True
        )
        processor_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        simulator.simulate_transmission(messages, self.message_queue, self.processing_speed)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_queue.join()
        self.processing_active = False
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥–∞—á–∏
        transmission_stats = simulator.get_transmission_stats()
        self._print_transmission_stats(transmission_stats)
        
        self.logger.info(f" –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.processed_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        return True
    
    def _message_processor_worker(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é)"""
        progress_counter = 0
        
        while self.processing_active:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                message = self.message_queue.get(timeout=1.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –æ–∫–æ–Ω—á–∞–Ω–∏—è
                if message is None:
                    self.message_queue.task_done()
                    break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if self._process_single_message(message):
                    self.processed_messages += 1
                    progress_counter += 1
                    
                    # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if progress_counter % 5 == 0:
                        self._print_progress()
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.message_queue.task_done()
                
            except:
                # –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue
    
    def _print_progress(self):
        """–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if self.start_time:
            elapsed = (datetime.now() - self.start_time).total_seconds()
            rate = self.processed_messages / elapsed if elapsed > 0 else 0
            
            active_machines = sum(1 for m in self.machines.values() if m.current_yard_id)
            
            self.logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_messages} —Å–æ–æ–±—â–µ–Ω–∏–π | "
                           f"–°–∫–æ—Ä–æ—Å—Ç—å: {rate:.1f} —Å–æ–æ–±—â/—Å–µ–∫ | "
                           f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω: {active_machines}/{len(self.machines)}")
    
    def _print_transmission_stats(self, stats: Dict):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏"""
        self.logger.info(" –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–î–ê–ß–ò –°–û–û–ë–©–ï–ù–ò–ô:")
        self.logger.info(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_generated']}")
        self.logger.info(f"   –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['total_delivered']}")
        self.logger.info(f"   –ü–æ—Ç–µ—Ä—è–Ω–æ: {stats['total_lost']}")
        self.logger.info(f"   –ó–∞–¥–µ—Ä–∂–∞–Ω–æ: {stats['total_delayed']}")
        self.logger.info(f"   –° –æ—à–∏–±–∫–∞–º–∏: {stats['total_with_errors']}")
        self.logger.info(f"   –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {stats['delivery_rate']:.1f}%")
        self.logger.info(f"   –û—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {stats['error_rate']:.1f}%")
    
    def _process_single_message(self, message_data: Dict) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–∞—à–∏–Ω—ã
        
        Args:
            message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = MachineMessage(
                machine_id=message_data['machine_id'],
                timestamp=datetime.fromisoformat(message_data['timestamp']),
                coordinates=(message_data['x'], message_data['y']),
                yard_id=message_data.get('yard_id')
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–∞—à–∏–Ω—É
            if message.machine_id not in self.machines:
                self.machines[message.machine_id] = Machine(message.machine_id)
                self.logger.debug(f"üöö –ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: ID={message.machine_id}")
            
            machine = self.machines[message.machine_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–æ—Ä–æ–≤
            status_change = self.cleaning_service.process_machine_update(
                machine, message, self.yards
            )
            
            if status_change:
                self.status_changes.append(status_change)
                self.logger.info(
                    f"üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–æ—Ä–∞ {status_change['yard_id']}: "
                    f"{status_change['old_status']} -> {status_change['new_status']}"
                )
            
            return True
            
        except Exception as e:
            self.logger.error(f" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def generate_output_files(self, output_dir: str = "output") -> bool:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info(f" –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {output_dir}")
            
            Path(output_dir).mkdir(exist_ok=True)
            
            # –§–∞–π–ª —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–≤–æ—Ä–æ–≤
            yard_status_file = Path(output_dir) / "yard_status_changes.txt"
            self._write_yard_status_changes(yard_status_file)
            
            # –§–∞–π–ª —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –º–∞—à–∏–Ω
            machine_positions_file = Path(output_dir) / "final_machine_positions.txt"
            self._write_final_machine_positions(machine_positions_file)
            
            # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
            summary_file = Path(output_dir) / "summary_report.txt"
            self._write_summary_report(summary_file)
            
            self.logger.info(" –í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def _write_yard_status_changes(self, file_path: Path):
        """–ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–≤–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("# –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–≤–æ—Ä–æ–≤\n")
            f.write("# –§–æ—Ä–º–∞—Ç: ID_–¥–≤–æ—Ä–∞,–°—Ç–∞—Ç—É—Å,–í—Ä–µ–º—è_–∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n")
            
            if not self.status_changes:
                f.write("# –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ\n")
                return
            
            for change in self.status_changes:
                f.write(
                    f"{change['yard_id']},"
                    f"{change['new_status'].value}%,"
                    f"{change['timestamp']}\n"
                )
    
    def _write_final_machine_positions(self, file_path: Path):
        """–ó–∞–ø–∏—Å—å —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –º–∞—à–∏–Ω –≤ —Ñ–∞–π–ª"""
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("# –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—à–∏–Ω\n")
            f.write("# –§–æ—Ä–º–∞—Ç: ID_–º–∞—à–∏–Ω—ã,X,Y,ID_–¥–≤–æ—Ä–∞\n\n")
            
            for machine in self.machines.values():
                yard_id = machine.current_yard_id if machine.current_yard_id else ""
                f.write(
                    f"{machine.machine_id},"
                    f"{machine.current_coordinates[0]},"
                    f"{machine.current_coordinates[1]},"
                    f"{yard_id}\n"
                )
    
    def _write_summary_report(self, file_path: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("=== –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===\n\n")
            
            f.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {len(self.machines)}\n")
            f.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ—Ä–æ–≤: {len(self.yards)}\n")
            f.write(f"–ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤: {len(self.status_changes)}\n")
            
            if self.realtime_mode:
                f.write(f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—Å–∫–æ—Ä–æ—Å—Ç—å x{self.processing_speed})\n")
                f.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.processed_messages}\n")
            else:
                f.write("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n")
            
            f.write("\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–í–û–†–ê–ú ===\n")
            for yard in self.yards.values():
                progress = (yard.cleaned_area / yard.area * 100) if yard.area > 0 else 0
                f.write(
                    f"–î–≤–æ—Ä {yard.yard_id}: {progress:.1f}% —É–±—Ä–∞–Ω–æ "
                    f"(—Å—Ç–∞—Ç—É—Å: {yard.status.value}%)\n"
                )
            
            f.write("\n=== –ê–ö–¢–ò–í–ù–´–ï –ú–ê–®–ò–ù–´ ===\n")
            for machine in self.machines.values():
                status = f"–≤–æ –¥–≤–æ—Ä–µ {machine.current_yard_id}" if machine.current_yard_id else "–≤–Ω–µ –¥–≤–æ—Ä–æ–≤"
                f.write(f"–ú–∞—à–∏–Ω–∞ {machine.machine_id}: {status}\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–±–æ—Ä–æ—á–Ω—ã—Ö –º–∞—à–∏–Ω')
    parser.add_argument('--debug', action='store_true', help='–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏')
    parser.add_argument('--realtime', action='store_true', help='–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –ø–µ—Ä–µ–¥–∞—á–∏')
    parser.add_argument('--speed', type=float, default=1.0, help='–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')
    parser.add_argument('--yards', default='data/yards.txt', help='–§–∞–π–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–≤–æ—Ä–æ–≤')
    parser.add_argument('--messages', default='data/machine_messages.json', help='–§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞—à–∏–Ω')
    parser.add_argument('--output', default='output', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    system = CleaningMonitoringSystem(
        debug_mode=args.debug, 
        realtime_mode=args.realtime,
        processing_speed=args.speed
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–≤–æ—Ä–æ–≤
    if not system.load_yard_directory(args.yards):
        print(" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–≤–æ—Ä–æ–≤")
        return 1
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–∞—à–∏–Ω
    if not system.process_machine_messages(args.messages):
        print(" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–∞—à–∏–Ω")
        return 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not system.generate_output_files(args.output):
        print(" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        return 1
    
    mode_text = "–≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" if args.realtime else "–≤ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    print(f" –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ {mode_text}!")
    return 0


if __name__ == "__main__":
    exit(main())